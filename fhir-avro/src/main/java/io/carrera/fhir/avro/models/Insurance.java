/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.carrera.fhir.avro.models;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Insurance extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4699727876606799030L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Insurance\",\"namespace\":\"io.carrera.fhir.avro.models\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"sequence\",\"type\":\"int\"},{\"name\":\"focal\",\"type\":\"boolean\"},{\"name\":\"coverage\",\"type\":{\"type\":\"record\",\"name\":\"Coverage\",\"fields\":[{\"name\":\"resourceType\",\"type\":\"string\"},{\"name\":\"id\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"identifier\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"identifier_record\",\"fields\":[{\"name\":\"system\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"value\",\"type\":[\"null\",\"string\"],\"default\":null}]}}],\"default\":null},{\"name\":\"status\",\"type\":\"string\"},{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"CodeableConcept\",\"fields\":[{\"name\":\"coding\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Coding\",\"fields\":[{\"name\":\"system\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"code\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"display\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"version\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"userSelected\",\"type\":[\"null\",\"boolean\"],\"default\":null}]}}],\"default\":null},{\"name\":\"text\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null},{\"name\":\"policyHolder\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Reference\",\"fields\":[{\"name\":\"reference\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"type\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"display\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null},{\"name\":\"subscriber\",\"type\":[\"null\",\"Reference\"],\"default\":null},{\"name\":\"subscriberId\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"beneficiary\",\"type\":\"Reference\"},{\"name\":\"dependent\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"relationship\",\"type\":[\"null\",\"CodeableConcept\"],\"default\":null},{\"name\":\"period\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Period\",\"fields\":[{\"name\":\"start\",\"type\":[\"null\",{\"type\":\"int\",\"logicalType\":\"date\"},{\"type\":\"long\",\"logicalType\":\"local-timestamp-micros\"},{\"type\":\"record\",\"name\":\"DateTime\",\"fields\":[{\"name\":\"localDateTime\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"zoneId\",\"type\":\"string\"}]}],\"default\":null},{\"name\":\"end\",\"type\":[\"null\",{\"type\":\"int\",\"logicalType\":\"date\"},{\"type\":\"long\",\"logicalType\":\"local-timestamp-micros\"},\"DateTime\"],\"default\":null}]}],\"default\":null},{\"name\":\"payor\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"Reference\"}],\"default\":null},{\"name\":\"order\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"network\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"subrogation\",\"type\":[\"null\",\"boolean\"],\"default\":null}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();
static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.DateConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.LocalTimestampMicrosConversion());
  }

  private static final BinaryMessageEncoder<Insurance> ENCODER =
      new BinaryMessageEncoder<Insurance>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Insurance> DECODER =
      new BinaryMessageDecoder<Insurance>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Insurance> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Insurance> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Insurance> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Insurance>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Insurance to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Insurance from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Insurance instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Insurance fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence id;
   private int sequence;
   private boolean focal;
   private io.carrera.fhir.avro.models.Coverage coverage;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Insurance() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param sequence The new value for sequence
   * @param focal The new value for focal
   * @param coverage The new value for coverage
   */
  public Insurance(java.lang.CharSequence id, java.lang.Integer sequence, java.lang.Boolean focal, io.carrera.fhir.avro.models.Coverage coverage) {
    this.id = id;
    this.sequence = sequence;
    this.focal = focal;
    this.coverage = coverage;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return sequence;
    case 2: return focal;
    case 3: return coverage;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: sequence = (java.lang.Integer)value$; break;
    case 2: focal = (java.lang.Boolean)value$; break;
    case 3: coverage = (io.carrera.fhir.avro.models.Coverage)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'sequence' field.
   * @return The value of the 'sequence' field.
   */
  public int getSequence() {
    return sequence;
  }


  /**
   * Sets the value of the 'sequence' field.
   * @param value the value to set.
   */
  public void setSequence(int value) {
    this.sequence = value;
  }

  /**
   * Gets the value of the 'focal' field.
   * @return The value of the 'focal' field.
   */
  public boolean getFocal() {
    return focal;
  }


  /**
   * Sets the value of the 'focal' field.
   * @param value the value to set.
   */
  public void setFocal(boolean value) {
    this.focal = value;
  }

  /**
   * Gets the value of the 'coverage' field.
   * @return The value of the 'coverage' field.
   */
  public io.carrera.fhir.avro.models.Coverage getCoverage() {
    return coverage;
  }


  /**
   * Sets the value of the 'coverage' field.
   * @param value the value to set.
   */
  public void setCoverage(io.carrera.fhir.avro.models.Coverage value) {
    this.coverage = value;
  }

  /**
   * Creates a new Insurance RecordBuilder.
   * @return A new Insurance RecordBuilder
   */
  public static io.carrera.fhir.avro.models.Insurance.Builder newBuilder() {
    return new io.carrera.fhir.avro.models.Insurance.Builder();
  }

  /**
   * Creates a new Insurance RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Insurance RecordBuilder
   */
  public static io.carrera.fhir.avro.models.Insurance.Builder newBuilder(io.carrera.fhir.avro.models.Insurance.Builder other) {
    if (other == null) {
      return new io.carrera.fhir.avro.models.Insurance.Builder();
    } else {
      return new io.carrera.fhir.avro.models.Insurance.Builder(other);
    }
  }

  /**
   * Creates a new Insurance RecordBuilder by copying an existing Insurance instance.
   * @param other The existing instance to copy.
   * @return A new Insurance RecordBuilder
   */
  public static io.carrera.fhir.avro.models.Insurance.Builder newBuilder(io.carrera.fhir.avro.models.Insurance other) {
    if (other == null) {
      return new io.carrera.fhir.avro.models.Insurance.Builder();
    } else {
      return new io.carrera.fhir.avro.models.Insurance.Builder(other);
    }
  }

  /**
   * RecordBuilder for Insurance instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Insurance>
    implements org.apache.avro.data.RecordBuilder<Insurance> {

    private java.lang.CharSequence id;
    private int sequence;
    private boolean focal;
    private io.carrera.fhir.avro.models.Coverage coverage;
    private io.carrera.fhir.avro.models.Coverage.Builder coverageBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.carrera.fhir.avro.models.Insurance.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.sequence)) {
        this.sequence = data().deepCopy(fields()[1].schema(), other.sequence);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.focal)) {
        this.focal = data().deepCopy(fields()[2].schema(), other.focal);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.coverage)) {
        this.coverage = data().deepCopy(fields()[3].schema(), other.coverage);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (other.hasCoverageBuilder()) {
        this.coverageBuilder = io.carrera.fhir.avro.models.Coverage.newBuilder(other.getCoverageBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing Insurance instance
     * @param other The existing instance to copy.
     */
    private Builder(io.carrera.fhir.avro.models.Insurance other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sequence)) {
        this.sequence = data().deepCopy(fields()[1].schema(), other.sequence);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.focal)) {
        this.focal = data().deepCopy(fields()[2].schema(), other.focal);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.coverage)) {
        this.coverage = data().deepCopy(fields()[3].schema(), other.coverage);
        fieldSetFlags()[3] = true;
      }
      this.coverageBuilder = null;
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.Insurance.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.Insurance.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'sequence' field.
      * @return The value.
      */
    public int getSequence() {
      return sequence;
    }


    /**
      * Sets the value of the 'sequence' field.
      * @param value The value of 'sequence'.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.Insurance.Builder setSequence(int value) {
      validate(fields()[1], value);
      this.sequence = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'sequence' field has been set.
      * @return True if the 'sequence' field has been set, false otherwise.
      */
    public boolean hasSequence() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'sequence' field.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.Insurance.Builder clearSequence() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'focal' field.
      * @return The value.
      */
    public boolean getFocal() {
      return focal;
    }


    /**
      * Sets the value of the 'focal' field.
      * @param value The value of 'focal'.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.Insurance.Builder setFocal(boolean value) {
      validate(fields()[2], value);
      this.focal = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'focal' field has been set.
      * @return True if the 'focal' field has been set, false otherwise.
      */
    public boolean hasFocal() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'focal' field.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.Insurance.Builder clearFocal() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'coverage' field.
      * @return The value.
      */
    public io.carrera.fhir.avro.models.Coverage getCoverage() {
      return coverage;
    }


    /**
      * Sets the value of the 'coverage' field.
      * @param value The value of 'coverage'.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.Insurance.Builder setCoverage(io.carrera.fhir.avro.models.Coverage value) {
      validate(fields()[3], value);
      this.coverageBuilder = null;
      this.coverage = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'coverage' field has been set.
      * @return True if the 'coverage' field has been set, false otherwise.
      */
    public boolean hasCoverage() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'coverage' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public io.carrera.fhir.avro.models.Coverage.Builder getCoverageBuilder() {
      if (coverageBuilder == null) {
        if (hasCoverage()) {
          setCoverageBuilder(io.carrera.fhir.avro.models.Coverage.newBuilder(coverage));
        } else {
          setCoverageBuilder(io.carrera.fhir.avro.models.Coverage.newBuilder());
        }
      }
      return coverageBuilder;
    }

    /**
     * Sets the Builder instance for the 'coverage' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public io.carrera.fhir.avro.models.Insurance.Builder setCoverageBuilder(io.carrera.fhir.avro.models.Coverage.Builder value) {
      clearCoverage();
      coverageBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'coverage' field has an active Builder instance
     * @return True if the 'coverage' field has an active Builder instance
     */
    public boolean hasCoverageBuilder() {
      return coverageBuilder != null;
    }

    /**
      * Clears the value of the 'coverage' field.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.Insurance.Builder clearCoverage() {
      coverage = null;
      coverageBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Insurance build() {
      try {
        Insurance record = new Insurance();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.sequence = fieldSetFlags()[1] ? this.sequence : (java.lang.Integer) defaultValue(fields()[1]);
        record.focal = fieldSetFlags()[2] ? this.focal : (java.lang.Boolean) defaultValue(fields()[2]);
        if (coverageBuilder != null) {
          try {
            record.coverage = this.coverageBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("coverage"));
            throw e;
          }
        } else {
          record.coverage = fieldSetFlags()[3] ? this.coverage : (io.carrera.fhir.avro.models.Coverage) defaultValue(fields()[3]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Insurance>
    WRITER$ = (org.apache.avro.io.DatumWriter<Insurance>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Insurance>
    READER$ = (org.apache.avro.io.DatumReader<Insurance>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










