/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.carrera.fhir.avro.models;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Time extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 634377362312489552L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Time\",\"namespace\":\"io.carrera.fhir.avro.models\",\"fields\":[{\"name\":\"hour\",\"type\":\"int\"},{\"name\":\"minute\",\"type\":\"int\"},{\"name\":\"second\",\"type\":\"int\"},{\"name\":\"millisecond\",\"type\":[\"null\",\"int\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Time> ENCODER =
      new BinaryMessageEncoder<Time>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Time> DECODER =
      new BinaryMessageDecoder<Time>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Time> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Time> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Time> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Time>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Time to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Time from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Time instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Time fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private int hour;
   private int minute;
   private int second;
   private java.lang.Integer millisecond;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Time() {}

  /**
   * All-args constructor.
   * @param hour The new value for hour
   * @param minute The new value for minute
   * @param second The new value for second
   * @param millisecond The new value for millisecond
   */
  public Time(java.lang.Integer hour, java.lang.Integer minute, java.lang.Integer second, java.lang.Integer millisecond) {
    this.hour = hour;
    this.minute = minute;
    this.second = second;
    this.millisecond = millisecond;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return hour;
    case 1: return minute;
    case 2: return second;
    case 3: return millisecond;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: hour = (java.lang.Integer)value$; break;
    case 1: minute = (java.lang.Integer)value$; break;
    case 2: second = (java.lang.Integer)value$; break;
    case 3: millisecond = (java.lang.Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'hour' field.
   * @return The value of the 'hour' field.
   */
  public int getHour() {
    return hour;
  }


  /**
   * Sets the value of the 'hour' field.
   * @param value the value to set.
   */
  public void setHour(int value) {
    this.hour = value;
  }

  /**
   * Gets the value of the 'minute' field.
   * @return The value of the 'minute' field.
   */
  public int getMinute() {
    return minute;
  }


  /**
   * Sets the value of the 'minute' field.
   * @param value the value to set.
   */
  public void setMinute(int value) {
    this.minute = value;
  }

  /**
   * Gets the value of the 'second' field.
   * @return The value of the 'second' field.
   */
  public int getSecond() {
    return second;
  }


  /**
   * Sets the value of the 'second' field.
   * @param value the value to set.
   */
  public void setSecond(int value) {
    this.second = value;
  }

  /**
   * Gets the value of the 'millisecond' field.
   * @return The value of the 'millisecond' field.
   */
  public java.lang.Integer getMillisecond() {
    return millisecond;
  }


  /**
   * Sets the value of the 'millisecond' field.
   * @param value the value to set.
   */
  public void setMillisecond(java.lang.Integer value) {
    this.millisecond = value;
  }

  /**
   * Creates a new Time RecordBuilder.
   * @return A new Time RecordBuilder
   */
  public static io.carrera.fhir.avro.models.Time.Builder newBuilder() {
    return new io.carrera.fhir.avro.models.Time.Builder();
  }

  /**
   * Creates a new Time RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Time RecordBuilder
   */
  public static io.carrera.fhir.avro.models.Time.Builder newBuilder(io.carrera.fhir.avro.models.Time.Builder other) {
    if (other == null) {
      return new io.carrera.fhir.avro.models.Time.Builder();
    } else {
      return new io.carrera.fhir.avro.models.Time.Builder(other);
    }
  }

  /**
   * Creates a new Time RecordBuilder by copying an existing Time instance.
   * @param other The existing instance to copy.
   * @return A new Time RecordBuilder
   */
  public static io.carrera.fhir.avro.models.Time.Builder newBuilder(io.carrera.fhir.avro.models.Time other) {
    if (other == null) {
      return new io.carrera.fhir.avro.models.Time.Builder();
    } else {
      return new io.carrera.fhir.avro.models.Time.Builder(other);
    }
  }

  /**
   * RecordBuilder for Time instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Time>
    implements org.apache.avro.data.RecordBuilder<Time> {

    private int hour;
    private int minute;
    private int second;
    private java.lang.Integer millisecond;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.carrera.fhir.avro.models.Time.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.hour)) {
        this.hour = data().deepCopy(fields()[0].schema(), other.hour);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.minute)) {
        this.minute = data().deepCopy(fields()[1].schema(), other.minute);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.second)) {
        this.second = data().deepCopy(fields()[2].schema(), other.second);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.millisecond)) {
        this.millisecond = data().deepCopy(fields()[3].schema(), other.millisecond);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing Time instance
     * @param other The existing instance to copy.
     */
    private Builder(io.carrera.fhir.avro.models.Time other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.hour)) {
        this.hour = data().deepCopy(fields()[0].schema(), other.hour);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.minute)) {
        this.minute = data().deepCopy(fields()[1].schema(), other.minute);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.second)) {
        this.second = data().deepCopy(fields()[2].schema(), other.second);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.millisecond)) {
        this.millisecond = data().deepCopy(fields()[3].schema(), other.millisecond);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'hour' field.
      * @return The value.
      */
    public int getHour() {
      return hour;
    }


    /**
      * Sets the value of the 'hour' field.
      * @param value The value of 'hour'.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.Time.Builder setHour(int value) {
      validate(fields()[0], value);
      this.hour = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'hour' field has been set.
      * @return True if the 'hour' field has been set, false otherwise.
      */
    public boolean hasHour() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'hour' field.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.Time.Builder clearHour() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'minute' field.
      * @return The value.
      */
    public int getMinute() {
      return minute;
    }


    /**
      * Sets the value of the 'minute' field.
      * @param value The value of 'minute'.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.Time.Builder setMinute(int value) {
      validate(fields()[1], value);
      this.minute = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'minute' field has been set.
      * @return True if the 'minute' field has been set, false otherwise.
      */
    public boolean hasMinute() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'minute' field.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.Time.Builder clearMinute() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'second' field.
      * @return The value.
      */
    public int getSecond() {
      return second;
    }


    /**
      * Sets the value of the 'second' field.
      * @param value The value of 'second'.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.Time.Builder setSecond(int value) {
      validate(fields()[2], value);
      this.second = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'second' field has been set.
      * @return True if the 'second' field has been set, false otherwise.
      */
    public boolean hasSecond() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'second' field.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.Time.Builder clearSecond() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'millisecond' field.
      * @return The value.
      */
    public java.lang.Integer getMillisecond() {
      return millisecond;
    }


    /**
      * Sets the value of the 'millisecond' field.
      * @param value The value of 'millisecond'.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.Time.Builder setMillisecond(java.lang.Integer value) {
      validate(fields()[3], value);
      this.millisecond = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'millisecond' field has been set.
      * @return True if the 'millisecond' field has been set, false otherwise.
      */
    public boolean hasMillisecond() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'millisecond' field.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.Time.Builder clearMillisecond() {
      millisecond = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Time build() {
      try {
        Time record = new Time();
        record.hour = fieldSetFlags()[0] ? this.hour : (java.lang.Integer) defaultValue(fields()[0]);
        record.minute = fieldSetFlags()[1] ? this.minute : (java.lang.Integer) defaultValue(fields()[1]);
        record.second = fieldSetFlags()[2] ? this.second : (java.lang.Integer) defaultValue(fields()[2]);
        record.millisecond = fieldSetFlags()[3] ? this.millisecond : (java.lang.Integer) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Time>
    WRITER$ = (org.apache.avro.io.DatumWriter<Time>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Time>
    READER$ = (org.apache.avro.io.DatumReader<Time>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.hour);

    out.writeInt(this.minute);

    out.writeInt(this.second);

    if (this.millisecond == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.millisecond);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.hour = in.readInt();

      this.minute = in.readInt();

      this.second = in.readInt();

      if (in.readIndex() != 1) {
        in.readNull();
        this.millisecond = null;
      } else {
        this.millisecond = in.readInt();
      }

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.hour = in.readInt();
          break;

        case 1:
          this.minute = in.readInt();
          break;

        case 2:
          this.second = in.readInt();
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.millisecond = null;
          } else {
            this.millisecond = in.readInt();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










