/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.carrera.fhir.avro.models;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class RiskAssessment extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2705548273974225300L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RiskAssessment\",\"namespace\":\"io.carrera.fhir.avro.models\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"status\",\"type\":\"string\"},{\"name\":\"subject\",\"type\":{\"type\":\"record\",\"name\":\"Reference\",\"fields\":[{\"name\":\"reference\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"type\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"display\",\"type\":[\"null\",\"string\"],\"default\":null}]}},{\"name\":\"prediction\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"RiskAssessment_Prediction\",\"fields\":[{\"name\":\"outcome\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"CodeableConcept\",\"fields\":[{\"name\":\"coding\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Coding\",\"fields\":[{\"name\":\"system\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"code\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"display\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"version\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"userSelected\",\"type\":[\"null\",\"boolean\"],\"default\":null}]}}],\"default\":null},{\"name\":\"text\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null},{\"name\":\"probabilityDecimal\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"probabilityRange\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Range\",\"fields\":[{\"name\":\"low\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Quantity\",\"fields\":[{\"name\":\"value\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"unit\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"system\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"code\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"comparator\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null},{\"name\":\"high\",\"type\":[\"null\",\"Quantity\"],\"default\":null}]}],\"default\":null},{\"name\":\"qualitativeRisk\",\"type\":[\"null\",\"CodeableConcept\"],\"default\":null},{\"name\":\"relativeRisk\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"whenPeriod\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Period\",\"fields\":[{\"name\":\"start\",\"type\":[\"null\",{\"type\":\"int\",\"logicalType\":\"date\"},{\"type\":\"long\",\"logicalType\":\"local-timestamp-micros\"}],\"default\":null},{\"name\":\"end\",\"type\":[\"null\",{\"type\":\"int\",\"logicalType\":\"date\"},{\"type\":\"long\",\"logicalType\":\"local-timestamp-micros\"}],\"default\":null}]}],\"default\":null},{\"name\":\"whenRange\",\"type\":[\"null\",\"Range\"],\"default\":null},{\"name\":\"rationale\",\"type\":[\"null\",\"string\"],\"default\":null}]}}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();
static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.DateConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.LocalTimestampMicrosConversion());
  }

  private static final BinaryMessageEncoder<RiskAssessment> ENCODER =
      new BinaryMessageEncoder<RiskAssessment>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<RiskAssessment> DECODER =
      new BinaryMessageDecoder<RiskAssessment>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<RiskAssessment> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<RiskAssessment> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<RiskAssessment> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<RiskAssessment>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this RiskAssessment to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a RiskAssessment from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a RiskAssessment instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static RiskAssessment fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence id;
   private java.lang.CharSequence status;
   private io.carrera.fhir.avro.models.Reference subject;
   private java.util.List<io.carrera.fhir.avro.models.RiskAssessment_Prediction> prediction;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public RiskAssessment() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param status The new value for status
   * @param subject The new value for subject
   * @param prediction The new value for prediction
   */
  public RiskAssessment(java.lang.CharSequence id, java.lang.CharSequence status, io.carrera.fhir.avro.models.Reference subject, java.util.List<io.carrera.fhir.avro.models.RiskAssessment_Prediction> prediction) {
    this.id = id;
    this.status = status;
    this.subject = subject;
    this.prediction = prediction;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return status;
    case 2: return subject;
    case 3: return prediction;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: status = (java.lang.CharSequence)value$; break;
    case 2: subject = (io.carrera.fhir.avro.models.Reference)value$; break;
    case 3: prediction = (java.util.List<io.carrera.fhir.avro.models.RiskAssessment_Prediction>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public java.lang.CharSequence getStatus() {
    return status;
  }


  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(java.lang.CharSequence value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'subject' field.
   * @return The value of the 'subject' field.
   */
  public io.carrera.fhir.avro.models.Reference getSubject() {
    return subject;
  }


  /**
   * Sets the value of the 'subject' field.
   * @param value the value to set.
   */
  public void setSubject(io.carrera.fhir.avro.models.Reference value) {
    this.subject = value;
  }

  /**
   * Gets the value of the 'prediction' field.
   * @return The value of the 'prediction' field.
   */
  public java.util.List<io.carrera.fhir.avro.models.RiskAssessment_Prediction> getPrediction() {
    return prediction;
  }


  /**
   * Sets the value of the 'prediction' field.
   * @param value the value to set.
   */
  public void setPrediction(java.util.List<io.carrera.fhir.avro.models.RiskAssessment_Prediction> value) {
    this.prediction = value;
  }

  /**
   * Creates a new RiskAssessment RecordBuilder.
   * @return A new RiskAssessment RecordBuilder
   */
  public static io.carrera.fhir.avro.models.RiskAssessment.Builder newBuilder() {
    return new io.carrera.fhir.avro.models.RiskAssessment.Builder();
  }

  /**
   * Creates a new RiskAssessment RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new RiskAssessment RecordBuilder
   */
  public static io.carrera.fhir.avro.models.RiskAssessment.Builder newBuilder(io.carrera.fhir.avro.models.RiskAssessment.Builder other) {
    if (other == null) {
      return new io.carrera.fhir.avro.models.RiskAssessment.Builder();
    } else {
      return new io.carrera.fhir.avro.models.RiskAssessment.Builder(other);
    }
  }

  /**
   * Creates a new RiskAssessment RecordBuilder by copying an existing RiskAssessment instance.
   * @param other The existing instance to copy.
   * @return A new RiskAssessment RecordBuilder
   */
  public static io.carrera.fhir.avro.models.RiskAssessment.Builder newBuilder(io.carrera.fhir.avro.models.RiskAssessment other) {
    if (other == null) {
      return new io.carrera.fhir.avro.models.RiskAssessment.Builder();
    } else {
      return new io.carrera.fhir.avro.models.RiskAssessment.Builder(other);
    }
  }

  /**
   * RecordBuilder for RiskAssessment instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RiskAssessment>
    implements org.apache.avro.data.RecordBuilder<RiskAssessment> {

    private java.lang.CharSequence id;
    private java.lang.CharSequence status;
    private io.carrera.fhir.avro.models.Reference subject;
    private io.carrera.fhir.avro.models.Reference.Builder subjectBuilder;
    private java.util.List<io.carrera.fhir.avro.models.RiskAssessment_Prediction> prediction;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.carrera.fhir.avro.models.RiskAssessment.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.status)) {
        this.status = data().deepCopy(fields()[1].schema(), other.status);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.subject)) {
        this.subject = data().deepCopy(fields()[2].schema(), other.subject);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (other.hasSubjectBuilder()) {
        this.subjectBuilder = io.carrera.fhir.avro.models.Reference.newBuilder(other.getSubjectBuilder());
      }
      if (isValidValue(fields()[3], other.prediction)) {
        this.prediction = data().deepCopy(fields()[3].schema(), other.prediction);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing RiskAssessment instance
     * @param other The existing instance to copy.
     */
    private Builder(io.carrera.fhir.avro.models.RiskAssessment other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.status)) {
        this.status = data().deepCopy(fields()[1].schema(), other.status);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.subject)) {
        this.subject = data().deepCopy(fields()[2].schema(), other.subject);
        fieldSetFlags()[2] = true;
      }
      this.subjectBuilder = null;
      if (isValidValue(fields()[3], other.prediction)) {
        this.prediction = data().deepCopy(fields()[3].schema(), other.prediction);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.RiskAssessment.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.RiskAssessment.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public java.lang.CharSequence getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.RiskAssessment.Builder setStatus(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.status = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.RiskAssessment.Builder clearStatus() {
      status = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'subject' field.
      * @return The value.
      */
    public io.carrera.fhir.avro.models.Reference getSubject() {
      return subject;
    }


    /**
      * Sets the value of the 'subject' field.
      * @param value The value of 'subject'.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.RiskAssessment.Builder setSubject(io.carrera.fhir.avro.models.Reference value) {
      validate(fields()[2], value);
      this.subjectBuilder = null;
      this.subject = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'subject' field has been set.
      * @return True if the 'subject' field has been set, false otherwise.
      */
    public boolean hasSubject() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'subject' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public io.carrera.fhir.avro.models.Reference.Builder getSubjectBuilder() {
      if (subjectBuilder == null) {
        if (hasSubject()) {
          setSubjectBuilder(io.carrera.fhir.avro.models.Reference.newBuilder(subject));
        } else {
          setSubjectBuilder(io.carrera.fhir.avro.models.Reference.newBuilder());
        }
      }
      return subjectBuilder;
    }

    /**
     * Sets the Builder instance for the 'subject' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public io.carrera.fhir.avro.models.RiskAssessment.Builder setSubjectBuilder(io.carrera.fhir.avro.models.Reference.Builder value) {
      clearSubject();
      subjectBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'subject' field has an active Builder instance
     * @return True if the 'subject' field has an active Builder instance
     */
    public boolean hasSubjectBuilder() {
      return subjectBuilder != null;
    }

    /**
      * Clears the value of the 'subject' field.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.RiskAssessment.Builder clearSubject() {
      subject = null;
      subjectBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'prediction' field.
      * @return The value.
      */
    public java.util.List<io.carrera.fhir.avro.models.RiskAssessment_Prediction> getPrediction() {
      return prediction;
    }


    /**
      * Sets the value of the 'prediction' field.
      * @param value The value of 'prediction'.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.RiskAssessment.Builder setPrediction(java.util.List<io.carrera.fhir.avro.models.RiskAssessment_Prediction> value) {
      validate(fields()[3], value);
      this.prediction = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'prediction' field has been set.
      * @return True if the 'prediction' field has been set, false otherwise.
      */
    public boolean hasPrediction() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'prediction' field.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.RiskAssessment.Builder clearPrediction() {
      prediction = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public RiskAssessment build() {
      try {
        RiskAssessment record = new RiskAssessment();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.status = fieldSetFlags()[1] ? this.status : (java.lang.CharSequence) defaultValue(fields()[1]);
        if (subjectBuilder != null) {
          try {
            record.subject = this.subjectBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("subject"));
            throw e;
          }
        } else {
          record.subject = fieldSetFlags()[2] ? this.subject : (io.carrera.fhir.avro.models.Reference) defaultValue(fields()[2]);
        }
        record.prediction = fieldSetFlags()[3] ? this.prediction : (java.util.List<io.carrera.fhir.avro.models.RiskAssessment_Prediction>) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<RiskAssessment>
    WRITER$ = (org.apache.avro.io.DatumWriter<RiskAssessment>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<RiskAssessment>
    READER$ = (org.apache.avro.io.DatumReader<RiskAssessment>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










