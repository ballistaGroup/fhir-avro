/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.carrera.fhir.avro.models;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class name_record extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2109923348592753124L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"name_record\",\"namespace\":\"io.carrera.fhir.avro.models\",\"fields\":[{\"name\":\"use\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"family\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"given\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}],\"default\":null},{\"name\":\"prefix\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<name_record> ENCODER =
      new BinaryMessageEncoder<name_record>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<name_record> DECODER =
      new BinaryMessageDecoder<name_record>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<name_record> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<name_record> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<name_record> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<name_record>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this name_record to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a name_record from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a name_record instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static name_record fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence use;
   private java.lang.CharSequence family;
   private java.util.List<java.lang.CharSequence> given;
   private java.util.List<java.lang.CharSequence> prefix;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public name_record() {}

  /**
   * All-args constructor.
   * @param use The new value for use
   * @param family The new value for family
   * @param given The new value for given
   * @param prefix The new value for prefix
   */
  public name_record(java.lang.CharSequence use, java.lang.CharSequence family, java.util.List<java.lang.CharSequence> given, java.util.List<java.lang.CharSequence> prefix) {
    this.use = use;
    this.family = family;
    this.given = given;
    this.prefix = prefix;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return use;
    case 1: return family;
    case 2: return given;
    case 3: return prefix;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: use = (java.lang.CharSequence)value$; break;
    case 1: family = (java.lang.CharSequence)value$; break;
    case 2: given = (java.util.List<java.lang.CharSequence>)value$; break;
    case 3: prefix = (java.util.List<java.lang.CharSequence>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'use' field.
   * @return The value of the 'use' field.
   */
  public java.lang.CharSequence getUse() {
    return use;
  }


  /**
   * Sets the value of the 'use' field.
   * @param value the value to set.
   */
  public void setUse(java.lang.CharSequence value) {
    this.use = value;
  }

  /**
   * Gets the value of the 'family' field.
   * @return The value of the 'family' field.
   */
  public java.lang.CharSequence getFamily() {
    return family;
  }


  /**
   * Sets the value of the 'family' field.
   * @param value the value to set.
   */
  public void setFamily(java.lang.CharSequence value) {
    this.family = value;
  }

  /**
   * Gets the value of the 'given' field.
   * @return The value of the 'given' field.
   */
  public java.util.List<java.lang.CharSequence> getGiven() {
    return given;
  }


  /**
   * Sets the value of the 'given' field.
   * @param value the value to set.
   */
  public void setGiven(java.util.List<java.lang.CharSequence> value) {
    this.given = value;
  }

  /**
   * Gets the value of the 'prefix' field.
   * @return The value of the 'prefix' field.
   */
  public java.util.List<java.lang.CharSequence> getPrefix() {
    return prefix;
  }


  /**
   * Sets the value of the 'prefix' field.
   * @param value the value to set.
   */
  public void setPrefix(java.util.List<java.lang.CharSequence> value) {
    this.prefix = value;
  }

  /**
   * Creates a new name_record RecordBuilder.
   * @return A new name_record RecordBuilder
   */
  public static io.carrera.fhir.avro.models.name_record.Builder newBuilder() {
    return new io.carrera.fhir.avro.models.name_record.Builder();
  }

  /**
   * Creates a new name_record RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new name_record RecordBuilder
   */
  public static io.carrera.fhir.avro.models.name_record.Builder newBuilder(io.carrera.fhir.avro.models.name_record.Builder other) {
    if (other == null) {
      return new io.carrera.fhir.avro.models.name_record.Builder();
    } else {
      return new io.carrera.fhir.avro.models.name_record.Builder(other);
    }
  }

  /**
   * Creates a new name_record RecordBuilder by copying an existing name_record instance.
   * @param other The existing instance to copy.
   * @return A new name_record RecordBuilder
   */
  public static io.carrera.fhir.avro.models.name_record.Builder newBuilder(io.carrera.fhir.avro.models.name_record other) {
    if (other == null) {
      return new io.carrera.fhir.avro.models.name_record.Builder();
    } else {
      return new io.carrera.fhir.avro.models.name_record.Builder(other);
    }
  }

  /**
   * RecordBuilder for name_record instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<name_record>
    implements org.apache.avro.data.RecordBuilder<name_record> {

    private java.lang.CharSequence use;
    private java.lang.CharSequence family;
    private java.util.List<java.lang.CharSequence> given;
    private java.util.List<java.lang.CharSequence> prefix;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.carrera.fhir.avro.models.name_record.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.use)) {
        this.use = data().deepCopy(fields()[0].schema(), other.use);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.family)) {
        this.family = data().deepCopy(fields()[1].schema(), other.family);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.given)) {
        this.given = data().deepCopy(fields()[2].schema(), other.given);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.prefix)) {
        this.prefix = data().deepCopy(fields()[3].schema(), other.prefix);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing name_record instance
     * @param other The existing instance to copy.
     */
    private Builder(io.carrera.fhir.avro.models.name_record other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.use)) {
        this.use = data().deepCopy(fields()[0].schema(), other.use);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.family)) {
        this.family = data().deepCopy(fields()[1].schema(), other.family);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.given)) {
        this.given = data().deepCopy(fields()[2].schema(), other.given);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.prefix)) {
        this.prefix = data().deepCopy(fields()[3].schema(), other.prefix);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'use' field.
      * @return The value.
      */
    public java.lang.CharSequence getUse() {
      return use;
    }


    /**
      * Sets the value of the 'use' field.
      * @param value The value of 'use'.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.name_record.Builder setUse(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.use = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'use' field has been set.
      * @return True if the 'use' field has been set, false otherwise.
      */
    public boolean hasUse() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'use' field.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.name_record.Builder clearUse() {
      use = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'family' field.
      * @return The value.
      */
    public java.lang.CharSequence getFamily() {
      return family;
    }


    /**
      * Sets the value of the 'family' field.
      * @param value The value of 'family'.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.name_record.Builder setFamily(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.family = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'family' field has been set.
      * @return True if the 'family' field has been set, false otherwise.
      */
    public boolean hasFamily() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'family' field.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.name_record.Builder clearFamily() {
      family = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'given' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getGiven() {
      return given;
    }


    /**
      * Sets the value of the 'given' field.
      * @param value The value of 'given'.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.name_record.Builder setGiven(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[2], value);
      this.given = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'given' field has been set.
      * @return True if the 'given' field has been set, false otherwise.
      */
    public boolean hasGiven() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'given' field.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.name_record.Builder clearGiven() {
      given = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'prefix' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getPrefix() {
      return prefix;
    }


    /**
      * Sets the value of the 'prefix' field.
      * @param value The value of 'prefix'.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.name_record.Builder setPrefix(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[3], value);
      this.prefix = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'prefix' field has been set.
      * @return True if the 'prefix' field has been set, false otherwise.
      */
    public boolean hasPrefix() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'prefix' field.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.name_record.Builder clearPrefix() {
      prefix = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public name_record build() {
      try {
        name_record record = new name_record();
        record.use = fieldSetFlags()[0] ? this.use : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.family = fieldSetFlags()[1] ? this.family : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.given = fieldSetFlags()[2] ? this.given : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[2]);
        record.prefix = fieldSetFlags()[3] ? this.prefix : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<name_record>
    WRITER$ = (org.apache.avro.io.DatumWriter<name_record>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<name_record>
    READER$ = (org.apache.avro.io.DatumReader<name_record>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.use == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.use);
    }

    if (this.family == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.family);
    }

    if (this.given == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size0 = this.given.size();
      out.writeArrayStart();
      out.setItemCount(size0);
      long actualSize0 = 0;
      for (java.lang.CharSequence e0: this.given) {
        actualSize0++;
        out.startItem();
        out.writeString(e0);
      }
      out.writeArrayEnd();
      if (actualSize0 != size0)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");
    }

    if (this.prefix == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size1 = this.prefix.size();
      out.writeArrayStart();
      out.setItemCount(size1);
      long actualSize1 = 0;
      for (java.lang.CharSequence e1: this.prefix) {
        actualSize1++;
        out.startItem();
        out.writeString(e1);
      }
      out.writeArrayEnd();
      if (actualSize1 != size1)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.use = null;
      } else {
        this.use = in.readString(this.use instanceof Utf8 ? (Utf8)this.use : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.family = null;
      } else {
        this.family = in.readString(this.family instanceof Utf8 ? (Utf8)this.family : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.given = null;
      } else {
        long size0 = in.readArrayStart();
        java.util.List<java.lang.CharSequence> a0 = this.given;
        if (a0 == null) {
          a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("given").schema().getTypes().get(1));
          this.given = a0;
        } else a0.clear();
        SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
        for ( ; 0 < size0; size0 = in.arrayNext()) {
          for ( ; size0 != 0; size0--) {
            java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
            e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
            a0.add(e0);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.prefix = null;
      } else {
        long size1 = in.readArrayStart();
        java.util.List<java.lang.CharSequence> a1 = this.prefix;
        if (a1 == null) {
          a1 = new SpecificData.Array<java.lang.CharSequence>((int)size1, SCHEMA$.getField("prefix").schema().getTypes().get(1));
          this.prefix = a1;
        } else a1.clear();
        SpecificData.Array<java.lang.CharSequence> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a1 : null);
        for ( ; 0 < size1; size1 = in.arrayNext()) {
          for ( ; size1 != 0; size1--) {
            java.lang.CharSequence e1 = (ga1 != null ? ga1.peek() : null);
            e1 = in.readString(e1 instanceof Utf8 ? (Utf8)e1 : null);
            a1.add(e1);
          }
        }
      }

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.use = null;
          } else {
            this.use = in.readString(this.use instanceof Utf8 ? (Utf8)this.use : null);
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.family = null;
          } else {
            this.family = in.readString(this.family instanceof Utf8 ? (Utf8)this.family : null);
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.given = null;
          } else {
            long size0 = in.readArrayStart();
            java.util.List<java.lang.CharSequence> a0 = this.given;
            if (a0 == null) {
              a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("given").schema().getTypes().get(1));
              this.given = a0;
            } else a0.clear();
            SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
            for ( ; 0 < size0; size0 = in.arrayNext()) {
              for ( ; size0 != 0; size0--) {
                java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
                e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
                a0.add(e0);
              }
            }
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.prefix = null;
          } else {
            long size1 = in.readArrayStart();
            java.util.List<java.lang.CharSequence> a1 = this.prefix;
            if (a1 == null) {
              a1 = new SpecificData.Array<java.lang.CharSequence>((int)size1, SCHEMA$.getField("prefix").schema().getTypes().get(1));
              this.prefix = a1;
            } else a1.clear();
            SpecificData.Array<java.lang.CharSequence> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a1 : null);
            for ( ; 0 < size1; size1 = in.arrayNext()) {
              for ( ; size1 != 0; size1--) {
                java.lang.CharSequence e1 = (ga1 != null ? ga1.peek() : null);
                e1 = in.readString(e1 instanceof Utf8 ? (Utf8)e1 : null);
                a1.add(e1);
              }
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










