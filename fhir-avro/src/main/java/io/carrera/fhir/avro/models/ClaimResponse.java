/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.carrera.fhir.avro.models;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ClaimResponse extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6838759400096806747L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ClaimResponse\",\"namespace\":\"io.carrera.fhir.avro.models\",\"fields\":[{\"name\":\"resourceType\",\"type\":\"string\"},{\"name\":\"id\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"identifier\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"identifier_record\",\"fields\":[{\"name\":\"system\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"value\",\"type\":[\"null\",\"string\"],\"default\":null}]}}],\"default\":null},{\"name\":\"status\",\"type\":\"string\"},{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"CodeableConcept\",\"fields\":[{\"name\":\"coding\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Coding\",\"fields\":[{\"name\":\"system\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"code\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"display\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"version\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"userSelected\",\"type\":[\"null\",\"boolean\"],\"default\":null}]}}],\"default\":null},{\"name\":\"text\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null},{\"name\":\"subType\",\"type\":[\"null\",\"CodeableConcept\"],\"default\":null},{\"name\":\"use\",\"type\":\"string\"},{\"name\":\"patient\",\"type\":{\"type\":\"record\",\"name\":\"Reference\",\"fields\":[{\"name\":\"reference\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"type\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"display\",\"type\":[\"null\",\"string\"],\"default\":null}]}},{\"name\":\"created\",\"type\":{\"type\":\"record\",\"name\":\"DateTime\",\"fields\":[{\"name\":\"value\",\"type\":[{\"type\":\"record\",\"name\":\"XsDateTime\",\"fields\":[{\"name\":\"millis\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"zoneId\",\"type\":\"string\"}]},{\"type\":\"record\",\"name\":\"XsDate\",\"fields\":[{\"name\":\"value\",\"type\":{\"type\":\"int\",\"logicalType\":\"date\"}}]},{\"type\":\"record\",\"name\":\"XsYearMonth\",\"fields\":[{\"name\":\"year\",\"type\":\"int\"},{\"name\":\"month\",\"type\":\"int\"}]},{\"type\":\"record\",\"name\":\"XsYear\",\"fields\":[{\"name\":\"value\",\"type\":\"int\"}]}]}]}},{\"name\":\"insurer\",\"type\":\"Reference\"},{\"name\":\"outcome\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();
static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.DateConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<ClaimResponse> ENCODER =
      new BinaryMessageEncoder<ClaimResponse>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ClaimResponse> DECODER =
      new BinaryMessageDecoder<ClaimResponse>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ClaimResponse> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ClaimResponse> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ClaimResponse> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ClaimResponse>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ClaimResponse to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ClaimResponse from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ClaimResponse instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ClaimResponse fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence resourceType;
   private java.lang.CharSequence id;
   private java.util.List<io.carrera.fhir.avro.models.identifier_record> identifier;
   private java.lang.CharSequence status;
   private io.carrera.fhir.avro.models.CodeableConcept type;
   private io.carrera.fhir.avro.models.CodeableConcept subType;
   private java.lang.CharSequence use;
   private io.carrera.fhir.avro.models.Reference patient;
   private io.carrera.fhir.avro.models.DateTime created;
   private io.carrera.fhir.avro.models.Reference insurer;
   private java.lang.CharSequence outcome;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ClaimResponse() {}

  /**
   * All-args constructor.
   * @param resourceType The new value for resourceType
   * @param id The new value for id
   * @param identifier The new value for identifier
   * @param status The new value for status
   * @param type The new value for type
   * @param subType The new value for subType
   * @param use The new value for use
   * @param patient The new value for patient
   * @param created The new value for created
   * @param insurer The new value for insurer
   * @param outcome The new value for outcome
   */
  public ClaimResponse(java.lang.CharSequence resourceType, java.lang.CharSequence id, java.util.List<io.carrera.fhir.avro.models.identifier_record> identifier, java.lang.CharSequence status, io.carrera.fhir.avro.models.CodeableConcept type, io.carrera.fhir.avro.models.CodeableConcept subType, java.lang.CharSequence use, io.carrera.fhir.avro.models.Reference patient, io.carrera.fhir.avro.models.DateTime created, io.carrera.fhir.avro.models.Reference insurer, java.lang.CharSequence outcome) {
    this.resourceType = resourceType;
    this.id = id;
    this.identifier = identifier;
    this.status = status;
    this.type = type;
    this.subType = subType;
    this.use = use;
    this.patient = patient;
    this.created = created;
    this.insurer = insurer;
    this.outcome = outcome;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return resourceType;
    case 1: return id;
    case 2: return identifier;
    case 3: return status;
    case 4: return type;
    case 5: return subType;
    case 6: return use;
    case 7: return patient;
    case 8: return created;
    case 9: return insurer;
    case 10: return outcome;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: resourceType = (java.lang.CharSequence)value$; break;
    case 1: id = (java.lang.CharSequence)value$; break;
    case 2: identifier = (java.util.List<io.carrera.fhir.avro.models.identifier_record>)value$; break;
    case 3: status = (java.lang.CharSequence)value$; break;
    case 4: type = (io.carrera.fhir.avro.models.CodeableConcept)value$; break;
    case 5: subType = (io.carrera.fhir.avro.models.CodeableConcept)value$; break;
    case 6: use = (java.lang.CharSequence)value$; break;
    case 7: patient = (io.carrera.fhir.avro.models.Reference)value$; break;
    case 8: created = (io.carrera.fhir.avro.models.DateTime)value$; break;
    case 9: insurer = (io.carrera.fhir.avro.models.Reference)value$; break;
    case 10: outcome = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'resourceType' field.
   * @return The value of the 'resourceType' field.
   */
  public java.lang.CharSequence getResourceType() {
    return resourceType;
  }


  /**
   * Sets the value of the 'resourceType' field.
   * @param value the value to set.
   */
  public void setResourceType(java.lang.CharSequence value) {
    this.resourceType = value;
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'identifier' field.
   * @return The value of the 'identifier' field.
   */
  public java.util.List<io.carrera.fhir.avro.models.identifier_record> getIdentifier() {
    return identifier;
  }


  /**
   * Sets the value of the 'identifier' field.
   * @param value the value to set.
   */
  public void setIdentifier(java.util.List<io.carrera.fhir.avro.models.identifier_record> value) {
    this.identifier = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public java.lang.CharSequence getStatus() {
    return status;
  }


  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(java.lang.CharSequence value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public io.carrera.fhir.avro.models.CodeableConcept getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(io.carrera.fhir.avro.models.CodeableConcept value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'subType' field.
   * @return The value of the 'subType' field.
   */
  public io.carrera.fhir.avro.models.CodeableConcept getSubType() {
    return subType;
  }


  /**
   * Sets the value of the 'subType' field.
   * @param value the value to set.
   */
  public void setSubType(io.carrera.fhir.avro.models.CodeableConcept value) {
    this.subType = value;
  }

  /**
   * Gets the value of the 'use' field.
   * @return The value of the 'use' field.
   */
  public java.lang.CharSequence getUse() {
    return use;
  }


  /**
   * Sets the value of the 'use' field.
   * @param value the value to set.
   */
  public void setUse(java.lang.CharSequence value) {
    this.use = value;
  }

  /**
   * Gets the value of the 'patient' field.
   * @return The value of the 'patient' field.
   */
  public io.carrera.fhir.avro.models.Reference getPatient() {
    return patient;
  }


  /**
   * Sets the value of the 'patient' field.
   * @param value the value to set.
   */
  public void setPatient(io.carrera.fhir.avro.models.Reference value) {
    this.patient = value;
  }

  /**
   * Gets the value of the 'created' field.
   * @return The value of the 'created' field.
   */
  public io.carrera.fhir.avro.models.DateTime getCreated() {
    return created;
  }


  /**
   * Sets the value of the 'created' field.
   * @param value the value to set.
   */
  public void setCreated(io.carrera.fhir.avro.models.DateTime value) {
    this.created = value;
  }

  /**
   * Gets the value of the 'insurer' field.
   * @return The value of the 'insurer' field.
   */
  public io.carrera.fhir.avro.models.Reference getInsurer() {
    return insurer;
  }


  /**
   * Sets the value of the 'insurer' field.
   * @param value the value to set.
   */
  public void setInsurer(io.carrera.fhir.avro.models.Reference value) {
    this.insurer = value;
  }

  /**
   * Gets the value of the 'outcome' field.
   * @return The value of the 'outcome' field.
   */
  public java.lang.CharSequence getOutcome() {
    return outcome;
  }


  /**
   * Sets the value of the 'outcome' field.
   * @param value the value to set.
   */
  public void setOutcome(java.lang.CharSequence value) {
    this.outcome = value;
  }

  /**
   * Creates a new ClaimResponse RecordBuilder.
   * @return A new ClaimResponse RecordBuilder
   */
  public static io.carrera.fhir.avro.models.ClaimResponse.Builder newBuilder() {
    return new io.carrera.fhir.avro.models.ClaimResponse.Builder();
  }

  /**
   * Creates a new ClaimResponse RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ClaimResponse RecordBuilder
   */
  public static io.carrera.fhir.avro.models.ClaimResponse.Builder newBuilder(io.carrera.fhir.avro.models.ClaimResponse.Builder other) {
    if (other == null) {
      return new io.carrera.fhir.avro.models.ClaimResponse.Builder();
    } else {
      return new io.carrera.fhir.avro.models.ClaimResponse.Builder(other);
    }
  }

  /**
   * Creates a new ClaimResponse RecordBuilder by copying an existing ClaimResponse instance.
   * @param other The existing instance to copy.
   * @return A new ClaimResponse RecordBuilder
   */
  public static io.carrera.fhir.avro.models.ClaimResponse.Builder newBuilder(io.carrera.fhir.avro.models.ClaimResponse other) {
    if (other == null) {
      return new io.carrera.fhir.avro.models.ClaimResponse.Builder();
    } else {
      return new io.carrera.fhir.avro.models.ClaimResponse.Builder(other);
    }
  }

  /**
   * RecordBuilder for ClaimResponse instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ClaimResponse>
    implements org.apache.avro.data.RecordBuilder<ClaimResponse> {

    private java.lang.CharSequence resourceType;
    private java.lang.CharSequence id;
    private java.util.List<io.carrera.fhir.avro.models.identifier_record> identifier;
    private java.lang.CharSequence status;
    private io.carrera.fhir.avro.models.CodeableConcept type;
    private io.carrera.fhir.avro.models.CodeableConcept.Builder typeBuilder;
    private io.carrera.fhir.avro.models.CodeableConcept subType;
    private io.carrera.fhir.avro.models.CodeableConcept.Builder subTypeBuilder;
    private java.lang.CharSequence use;
    private io.carrera.fhir.avro.models.Reference patient;
    private io.carrera.fhir.avro.models.Reference.Builder patientBuilder;
    private io.carrera.fhir.avro.models.DateTime created;
    private io.carrera.fhir.avro.models.DateTime.Builder createdBuilder;
    private io.carrera.fhir.avro.models.Reference insurer;
    private io.carrera.fhir.avro.models.Reference.Builder insurerBuilder;
    private java.lang.CharSequence outcome;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.carrera.fhir.avro.models.ClaimResponse.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.resourceType)) {
        this.resourceType = data().deepCopy(fields()[0].schema(), other.resourceType);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.id)) {
        this.id = data().deepCopy(fields()[1].schema(), other.id);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.identifier)) {
        this.identifier = data().deepCopy(fields()[2].schema(), other.identifier);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.status)) {
        this.status = data().deepCopy(fields()[3].schema(), other.status);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.type)) {
        this.type = data().deepCopy(fields()[4].schema(), other.type);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (other.hasTypeBuilder()) {
        this.typeBuilder = io.carrera.fhir.avro.models.CodeableConcept.newBuilder(other.getTypeBuilder());
      }
      if (isValidValue(fields()[5], other.subType)) {
        this.subType = data().deepCopy(fields()[5].schema(), other.subType);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (other.hasSubTypeBuilder()) {
        this.subTypeBuilder = io.carrera.fhir.avro.models.CodeableConcept.newBuilder(other.getSubTypeBuilder());
      }
      if (isValidValue(fields()[6], other.use)) {
        this.use = data().deepCopy(fields()[6].schema(), other.use);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.patient)) {
        this.patient = data().deepCopy(fields()[7].schema(), other.patient);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (other.hasPatientBuilder()) {
        this.patientBuilder = io.carrera.fhir.avro.models.Reference.newBuilder(other.getPatientBuilder());
      }
      if (isValidValue(fields()[8], other.created)) {
        this.created = data().deepCopy(fields()[8].schema(), other.created);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (other.hasCreatedBuilder()) {
        this.createdBuilder = io.carrera.fhir.avro.models.DateTime.newBuilder(other.getCreatedBuilder());
      }
      if (isValidValue(fields()[9], other.insurer)) {
        this.insurer = data().deepCopy(fields()[9].schema(), other.insurer);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (other.hasInsurerBuilder()) {
        this.insurerBuilder = io.carrera.fhir.avro.models.Reference.newBuilder(other.getInsurerBuilder());
      }
      if (isValidValue(fields()[10], other.outcome)) {
        this.outcome = data().deepCopy(fields()[10].schema(), other.outcome);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
    }

    /**
     * Creates a Builder by copying an existing ClaimResponse instance
     * @param other The existing instance to copy.
     */
    private Builder(io.carrera.fhir.avro.models.ClaimResponse other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.resourceType)) {
        this.resourceType = data().deepCopy(fields()[0].schema(), other.resourceType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.id)) {
        this.id = data().deepCopy(fields()[1].schema(), other.id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.identifier)) {
        this.identifier = data().deepCopy(fields()[2].schema(), other.identifier);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.status)) {
        this.status = data().deepCopy(fields()[3].schema(), other.status);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.type)) {
        this.type = data().deepCopy(fields()[4].schema(), other.type);
        fieldSetFlags()[4] = true;
      }
      this.typeBuilder = null;
      if (isValidValue(fields()[5], other.subType)) {
        this.subType = data().deepCopy(fields()[5].schema(), other.subType);
        fieldSetFlags()[5] = true;
      }
      this.subTypeBuilder = null;
      if (isValidValue(fields()[6], other.use)) {
        this.use = data().deepCopy(fields()[6].schema(), other.use);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.patient)) {
        this.patient = data().deepCopy(fields()[7].schema(), other.patient);
        fieldSetFlags()[7] = true;
      }
      this.patientBuilder = null;
      if (isValidValue(fields()[8], other.created)) {
        this.created = data().deepCopy(fields()[8].schema(), other.created);
        fieldSetFlags()[8] = true;
      }
      this.createdBuilder = null;
      if (isValidValue(fields()[9], other.insurer)) {
        this.insurer = data().deepCopy(fields()[9].schema(), other.insurer);
        fieldSetFlags()[9] = true;
      }
      this.insurerBuilder = null;
      if (isValidValue(fields()[10], other.outcome)) {
        this.outcome = data().deepCopy(fields()[10].schema(), other.outcome);
        fieldSetFlags()[10] = true;
      }
    }

    /**
      * Gets the value of the 'resourceType' field.
      * @return The value.
      */
    public java.lang.CharSequence getResourceType() {
      return resourceType;
    }


    /**
      * Sets the value of the 'resourceType' field.
      * @param value The value of 'resourceType'.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.ClaimResponse.Builder setResourceType(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.resourceType = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'resourceType' field has been set.
      * @return True if the 'resourceType' field has been set, false otherwise.
      */
    public boolean hasResourceType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'resourceType' field.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.ClaimResponse.Builder clearResourceType() {
      resourceType = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.ClaimResponse.Builder setId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.ClaimResponse.Builder clearId() {
      id = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'identifier' field.
      * @return The value.
      */
    public java.util.List<io.carrera.fhir.avro.models.identifier_record> getIdentifier() {
      return identifier;
    }


    /**
      * Sets the value of the 'identifier' field.
      * @param value The value of 'identifier'.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.ClaimResponse.Builder setIdentifier(java.util.List<io.carrera.fhir.avro.models.identifier_record> value) {
      validate(fields()[2], value);
      this.identifier = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'identifier' field has been set.
      * @return True if the 'identifier' field has been set, false otherwise.
      */
    public boolean hasIdentifier() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'identifier' field.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.ClaimResponse.Builder clearIdentifier() {
      identifier = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public java.lang.CharSequence getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.ClaimResponse.Builder setStatus(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.status = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.ClaimResponse.Builder clearStatus() {
      status = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public io.carrera.fhir.avro.models.CodeableConcept getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.ClaimResponse.Builder setType(io.carrera.fhir.avro.models.CodeableConcept value) {
      validate(fields()[4], value);
      this.typeBuilder = null;
      this.type = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'type' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public io.carrera.fhir.avro.models.CodeableConcept.Builder getTypeBuilder() {
      if (typeBuilder == null) {
        if (hasType()) {
          setTypeBuilder(io.carrera.fhir.avro.models.CodeableConcept.newBuilder(type));
        } else {
          setTypeBuilder(io.carrera.fhir.avro.models.CodeableConcept.newBuilder());
        }
      }
      return typeBuilder;
    }

    /**
     * Sets the Builder instance for the 'type' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public io.carrera.fhir.avro.models.ClaimResponse.Builder setTypeBuilder(io.carrera.fhir.avro.models.CodeableConcept.Builder value) {
      clearType();
      typeBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'type' field has an active Builder instance
     * @return True if the 'type' field has an active Builder instance
     */
    public boolean hasTypeBuilder() {
      return typeBuilder != null;
    }

    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.ClaimResponse.Builder clearType() {
      type = null;
      typeBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'subType' field.
      * @return The value.
      */
    public io.carrera.fhir.avro.models.CodeableConcept getSubType() {
      return subType;
    }


    /**
      * Sets the value of the 'subType' field.
      * @param value The value of 'subType'.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.ClaimResponse.Builder setSubType(io.carrera.fhir.avro.models.CodeableConcept value) {
      validate(fields()[5], value);
      this.subTypeBuilder = null;
      this.subType = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'subType' field has been set.
      * @return True if the 'subType' field has been set, false otherwise.
      */
    public boolean hasSubType() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'subType' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public io.carrera.fhir.avro.models.CodeableConcept.Builder getSubTypeBuilder() {
      if (subTypeBuilder == null) {
        if (hasSubType()) {
          setSubTypeBuilder(io.carrera.fhir.avro.models.CodeableConcept.newBuilder(subType));
        } else {
          setSubTypeBuilder(io.carrera.fhir.avro.models.CodeableConcept.newBuilder());
        }
      }
      return subTypeBuilder;
    }

    /**
     * Sets the Builder instance for the 'subType' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public io.carrera.fhir.avro.models.ClaimResponse.Builder setSubTypeBuilder(io.carrera.fhir.avro.models.CodeableConcept.Builder value) {
      clearSubType();
      subTypeBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'subType' field has an active Builder instance
     * @return True if the 'subType' field has an active Builder instance
     */
    public boolean hasSubTypeBuilder() {
      return subTypeBuilder != null;
    }

    /**
      * Clears the value of the 'subType' field.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.ClaimResponse.Builder clearSubType() {
      subType = null;
      subTypeBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'use' field.
      * @return The value.
      */
    public java.lang.CharSequence getUse() {
      return use;
    }


    /**
      * Sets the value of the 'use' field.
      * @param value The value of 'use'.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.ClaimResponse.Builder setUse(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.use = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'use' field has been set.
      * @return True if the 'use' field has been set, false otherwise.
      */
    public boolean hasUse() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'use' field.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.ClaimResponse.Builder clearUse() {
      use = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'patient' field.
      * @return The value.
      */
    public io.carrera.fhir.avro.models.Reference getPatient() {
      return patient;
    }


    /**
      * Sets the value of the 'patient' field.
      * @param value The value of 'patient'.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.ClaimResponse.Builder setPatient(io.carrera.fhir.avro.models.Reference value) {
      validate(fields()[7], value);
      this.patientBuilder = null;
      this.patient = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'patient' field has been set.
      * @return True if the 'patient' field has been set, false otherwise.
      */
    public boolean hasPatient() {
      return fieldSetFlags()[7];
    }

    /**
     * Gets the Builder instance for the 'patient' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public io.carrera.fhir.avro.models.Reference.Builder getPatientBuilder() {
      if (patientBuilder == null) {
        if (hasPatient()) {
          setPatientBuilder(io.carrera.fhir.avro.models.Reference.newBuilder(patient));
        } else {
          setPatientBuilder(io.carrera.fhir.avro.models.Reference.newBuilder());
        }
      }
      return patientBuilder;
    }

    /**
     * Sets the Builder instance for the 'patient' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public io.carrera.fhir.avro.models.ClaimResponse.Builder setPatientBuilder(io.carrera.fhir.avro.models.Reference.Builder value) {
      clearPatient();
      patientBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'patient' field has an active Builder instance
     * @return True if the 'patient' field has an active Builder instance
     */
    public boolean hasPatientBuilder() {
      return patientBuilder != null;
    }

    /**
      * Clears the value of the 'patient' field.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.ClaimResponse.Builder clearPatient() {
      patient = null;
      patientBuilder = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'created' field.
      * @return The value.
      */
    public io.carrera.fhir.avro.models.DateTime getCreated() {
      return created;
    }


    /**
      * Sets the value of the 'created' field.
      * @param value The value of 'created'.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.ClaimResponse.Builder setCreated(io.carrera.fhir.avro.models.DateTime value) {
      validate(fields()[8], value);
      this.createdBuilder = null;
      this.created = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'created' field has been set.
      * @return True if the 'created' field has been set, false otherwise.
      */
    public boolean hasCreated() {
      return fieldSetFlags()[8];
    }

    /**
     * Gets the Builder instance for the 'created' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public io.carrera.fhir.avro.models.DateTime.Builder getCreatedBuilder() {
      if (createdBuilder == null) {
        if (hasCreated()) {
          setCreatedBuilder(io.carrera.fhir.avro.models.DateTime.newBuilder(created));
        } else {
          setCreatedBuilder(io.carrera.fhir.avro.models.DateTime.newBuilder());
        }
      }
      return createdBuilder;
    }

    /**
     * Sets the Builder instance for the 'created' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public io.carrera.fhir.avro.models.ClaimResponse.Builder setCreatedBuilder(io.carrera.fhir.avro.models.DateTime.Builder value) {
      clearCreated();
      createdBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'created' field has an active Builder instance
     * @return True if the 'created' field has an active Builder instance
     */
    public boolean hasCreatedBuilder() {
      return createdBuilder != null;
    }

    /**
      * Clears the value of the 'created' field.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.ClaimResponse.Builder clearCreated() {
      created = null;
      createdBuilder = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'insurer' field.
      * @return The value.
      */
    public io.carrera.fhir.avro.models.Reference getInsurer() {
      return insurer;
    }


    /**
      * Sets the value of the 'insurer' field.
      * @param value The value of 'insurer'.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.ClaimResponse.Builder setInsurer(io.carrera.fhir.avro.models.Reference value) {
      validate(fields()[9], value);
      this.insurerBuilder = null;
      this.insurer = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'insurer' field has been set.
      * @return True if the 'insurer' field has been set, false otherwise.
      */
    public boolean hasInsurer() {
      return fieldSetFlags()[9];
    }

    /**
     * Gets the Builder instance for the 'insurer' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public io.carrera.fhir.avro.models.Reference.Builder getInsurerBuilder() {
      if (insurerBuilder == null) {
        if (hasInsurer()) {
          setInsurerBuilder(io.carrera.fhir.avro.models.Reference.newBuilder(insurer));
        } else {
          setInsurerBuilder(io.carrera.fhir.avro.models.Reference.newBuilder());
        }
      }
      return insurerBuilder;
    }

    /**
     * Sets the Builder instance for the 'insurer' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public io.carrera.fhir.avro.models.ClaimResponse.Builder setInsurerBuilder(io.carrera.fhir.avro.models.Reference.Builder value) {
      clearInsurer();
      insurerBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'insurer' field has an active Builder instance
     * @return True if the 'insurer' field has an active Builder instance
     */
    public boolean hasInsurerBuilder() {
      return insurerBuilder != null;
    }

    /**
      * Clears the value of the 'insurer' field.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.ClaimResponse.Builder clearInsurer() {
      insurer = null;
      insurerBuilder = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'outcome' field.
      * @return The value.
      */
    public java.lang.CharSequence getOutcome() {
      return outcome;
    }


    /**
      * Sets the value of the 'outcome' field.
      * @param value The value of 'outcome'.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.ClaimResponse.Builder setOutcome(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.outcome = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'outcome' field has been set.
      * @return True if the 'outcome' field has been set, false otherwise.
      */
    public boolean hasOutcome() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'outcome' field.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.ClaimResponse.Builder clearOutcome() {
      outcome = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ClaimResponse build() {
      try {
        ClaimResponse record = new ClaimResponse();
        record.resourceType = fieldSetFlags()[0] ? this.resourceType : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.id = fieldSetFlags()[1] ? this.id : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.identifier = fieldSetFlags()[2] ? this.identifier : (java.util.List<io.carrera.fhir.avro.models.identifier_record>) defaultValue(fields()[2]);
        record.status = fieldSetFlags()[3] ? this.status : (java.lang.CharSequence) defaultValue(fields()[3]);
        if (typeBuilder != null) {
          try {
            record.type = this.typeBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("type"));
            throw e;
          }
        } else {
          record.type = fieldSetFlags()[4] ? this.type : (io.carrera.fhir.avro.models.CodeableConcept) defaultValue(fields()[4]);
        }
        if (subTypeBuilder != null) {
          try {
            record.subType = this.subTypeBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("subType"));
            throw e;
          }
        } else {
          record.subType = fieldSetFlags()[5] ? this.subType : (io.carrera.fhir.avro.models.CodeableConcept) defaultValue(fields()[5]);
        }
        record.use = fieldSetFlags()[6] ? this.use : (java.lang.CharSequence) defaultValue(fields()[6]);
        if (patientBuilder != null) {
          try {
            record.patient = this.patientBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("patient"));
            throw e;
          }
        } else {
          record.patient = fieldSetFlags()[7] ? this.patient : (io.carrera.fhir.avro.models.Reference) defaultValue(fields()[7]);
        }
        if (createdBuilder != null) {
          try {
            record.created = this.createdBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("created"));
            throw e;
          }
        } else {
          record.created = fieldSetFlags()[8] ? this.created : (io.carrera.fhir.avro.models.DateTime) defaultValue(fields()[8]);
        }
        if (insurerBuilder != null) {
          try {
            record.insurer = this.insurerBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("insurer"));
            throw e;
          }
        } else {
          record.insurer = fieldSetFlags()[9] ? this.insurer : (io.carrera.fhir.avro.models.Reference) defaultValue(fields()[9]);
        }
        record.outcome = fieldSetFlags()[10] ? this.outcome : (java.lang.CharSequence) defaultValue(fields()[10]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ClaimResponse>
    WRITER$ = (org.apache.avro.io.DatumWriter<ClaimResponse>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ClaimResponse>
    READER$ = (org.apache.avro.io.DatumReader<ClaimResponse>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










