/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.carrera.fhir.avro.models;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class EncounterDiagnosis extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 635520618025745094L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EncounterDiagnosis\",\"namespace\":\"io.carrera.fhir.avro.models\",\"fields\":[{\"name\":\"condition\",\"type\":{\"type\":\"record\",\"name\":\"Reference\",\"fields\":[{\"name\":\"reference\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"type\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"display\",\"type\":[\"null\",\"string\"],\"default\":null}]}},{\"name\":\"use\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"CodeableConcept\",\"fields\":[{\"name\":\"coding\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Coding\",\"fields\":[{\"name\":\"system\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"code\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"display\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"version\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"userSelected\",\"type\":[\"null\",\"boolean\"],\"default\":null}]}}],\"default\":null},{\"name\":\"text\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null},{\"name\":\"rank\",\"type\":[\"null\",\"int\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<EncounterDiagnosis> ENCODER =
      new BinaryMessageEncoder<EncounterDiagnosis>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<EncounterDiagnosis> DECODER =
      new BinaryMessageDecoder<EncounterDiagnosis>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<EncounterDiagnosis> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<EncounterDiagnosis> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<EncounterDiagnosis> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<EncounterDiagnosis>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this EncounterDiagnosis to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a EncounterDiagnosis from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a EncounterDiagnosis instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static EncounterDiagnosis fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private io.carrera.fhir.avro.models.Reference condition;
   private io.carrera.fhir.avro.models.CodeableConcept use;
   private java.lang.Integer rank;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EncounterDiagnosis() {}

  /**
   * All-args constructor.
   * @param condition The new value for condition
   * @param use The new value for use
   * @param rank The new value for rank
   */
  public EncounterDiagnosis(io.carrera.fhir.avro.models.Reference condition, io.carrera.fhir.avro.models.CodeableConcept use, java.lang.Integer rank) {
    this.condition = condition;
    this.use = use;
    this.rank = rank;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return condition;
    case 1: return use;
    case 2: return rank;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: condition = (io.carrera.fhir.avro.models.Reference)value$; break;
    case 1: use = (io.carrera.fhir.avro.models.CodeableConcept)value$; break;
    case 2: rank = (java.lang.Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'condition' field.
   * @return The value of the 'condition' field.
   */
  public io.carrera.fhir.avro.models.Reference getCondition() {
    return condition;
  }


  /**
   * Sets the value of the 'condition' field.
   * @param value the value to set.
   */
  public void setCondition(io.carrera.fhir.avro.models.Reference value) {
    this.condition = value;
  }

  /**
   * Gets the value of the 'use' field.
   * @return The value of the 'use' field.
   */
  public io.carrera.fhir.avro.models.CodeableConcept getUse() {
    return use;
  }


  /**
   * Sets the value of the 'use' field.
   * @param value the value to set.
   */
  public void setUse(io.carrera.fhir.avro.models.CodeableConcept value) {
    this.use = value;
  }

  /**
   * Gets the value of the 'rank' field.
   * @return The value of the 'rank' field.
   */
  public java.lang.Integer getRank() {
    return rank;
  }


  /**
   * Sets the value of the 'rank' field.
   * @param value the value to set.
   */
  public void setRank(java.lang.Integer value) {
    this.rank = value;
  }

  /**
   * Creates a new EncounterDiagnosis RecordBuilder.
   * @return A new EncounterDiagnosis RecordBuilder
   */
  public static io.carrera.fhir.avro.models.EncounterDiagnosis.Builder newBuilder() {
    return new io.carrera.fhir.avro.models.EncounterDiagnosis.Builder();
  }

  /**
   * Creates a new EncounterDiagnosis RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EncounterDiagnosis RecordBuilder
   */
  public static io.carrera.fhir.avro.models.EncounterDiagnosis.Builder newBuilder(io.carrera.fhir.avro.models.EncounterDiagnosis.Builder other) {
    if (other == null) {
      return new io.carrera.fhir.avro.models.EncounterDiagnosis.Builder();
    } else {
      return new io.carrera.fhir.avro.models.EncounterDiagnosis.Builder(other);
    }
  }

  /**
   * Creates a new EncounterDiagnosis RecordBuilder by copying an existing EncounterDiagnosis instance.
   * @param other The existing instance to copy.
   * @return A new EncounterDiagnosis RecordBuilder
   */
  public static io.carrera.fhir.avro.models.EncounterDiagnosis.Builder newBuilder(io.carrera.fhir.avro.models.EncounterDiagnosis other) {
    if (other == null) {
      return new io.carrera.fhir.avro.models.EncounterDiagnosis.Builder();
    } else {
      return new io.carrera.fhir.avro.models.EncounterDiagnosis.Builder(other);
    }
  }

  /**
   * RecordBuilder for EncounterDiagnosis instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EncounterDiagnosis>
    implements org.apache.avro.data.RecordBuilder<EncounterDiagnosis> {

    private io.carrera.fhir.avro.models.Reference condition;
    private io.carrera.fhir.avro.models.Reference.Builder conditionBuilder;
    private io.carrera.fhir.avro.models.CodeableConcept use;
    private io.carrera.fhir.avro.models.CodeableConcept.Builder useBuilder;
    private java.lang.Integer rank;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.carrera.fhir.avro.models.EncounterDiagnosis.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.condition)) {
        this.condition = data().deepCopy(fields()[0].schema(), other.condition);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasConditionBuilder()) {
        this.conditionBuilder = io.carrera.fhir.avro.models.Reference.newBuilder(other.getConditionBuilder());
      }
      if (isValidValue(fields()[1], other.use)) {
        this.use = data().deepCopy(fields()[1].schema(), other.use);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasUseBuilder()) {
        this.useBuilder = io.carrera.fhir.avro.models.CodeableConcept.newBuilder(other.getUseBuilder());
      }
      if (isValidValue(fields()[2], other.rank)) {
        this.rank = data().deepCopy(fields()[2].schema(), other.rank);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing EncounterDiagnosis instance
     * @param other The existing instance to copy.
     */
    private Builder(io.carrera.fhir.avro.models.EncounterDiagnosis other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.condition)) {
        this.condition = data().deepCopy(fields()[0].schema(), other.condition);
        fieldSetFlags()[0] = true;
      }
      this.conditionBuilder = null;
      if (isValidValue(fields()[1], other.use)) {
        this.use = data().deepCopy(fields()[1].schema(), other.use);
        fieldSetFlags()[1] = true;
      }
      this.useBuilder = null;
      if (isValidValue(fields()[2], other.rank)) {
        this.rank = data().deepCopy(fields()[2].schema(), other.rank);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'condition' field.
      * @return The value.
      */
    public io.carrera.fhir.avro.models.Reference getCondition() {
      return condition;
    }


    /**
      * Sets the value of the 'condition' field.
      * @param value The value of 'condition'.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.EncounterDiagnosis.Builder setCondition(io.carrera.fhir.avro.models.Reference value) {
      validate(fields()[0], value);
      this.conditionBuilder = null;
      this.condition = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'condition' field has been set.
      * @return True if the 'condition' field has been set, false otherwise.
      */
    public boolean hasCondition() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'condition' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public io.carrera.fhir.avro.models.Reference.Builder getConditionBuilder() {
      if (conditionBuilder == null) {
        if (hasCondition()) {
          setConditionBuilder(io.carrera.fhir.avro.models.Reference.newBuilder(condition));
        } else {
          setConditionBuilder(io.carrera.fhir.avro.models.Reference.newBuilder());
        }
      }
      return conditionBuilder;
    }

    /**
     * Sets the Builder instance for the 'condition' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public io.carrera.fhir.avro.models.EncounterDiagnosis.Builder setConditionBuilder(io.carrera.fhir.avro.models.Reference.Builder value) {
      clearCondition();
      conditionBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'condition' field has an active Builder instance
     * @return True if the 'condition' field has an active Builder instance
     */
    public boolean hasConditionBuilder() {
      return conditionBuilder != null;
    }

    /**
      * Clears the value of the 'condition' field.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.EncounterDiagnosis.Builder clearCondition() {
      condition = null;
      conditionBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'use' field.
      * @return The value.
      */
    public io.carrera.fhir.avro.models.CodeableConcept getUse() {
      return use;
    }


    /**
      * Sets the value of the 'use' field.
      * @param value The value of 'use'.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.EncounterDiagnosis.Builder setUse(io.carrera.fhir.avro.models.CodeableConcept value) {
      validate(fields()[1], value);
      this.useBuilder = null;
      this.use = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'use' field has been set.
      * @return True if the 'use' field has been set, false otherwise.
      */
    public boolean hasUse() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'use' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public io.carrera.fhir.avro.models.CodeableConcept.Builder getUseBuilder() {
      if (useBuilder == null) {
        if (hasUse()) {
          setUseBuilder(io.carrera.fhir.avro.models.CodeableConcept.newBuilder(use));
        } else {
          setUseBuilder(io.carrera.fhir.avro.models.CodeableConcept.newBuilder());
        }
      }
      return useBuilder;
    }

    /**
     * Sets the Builder instance for the 'use' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public io.carrera.fhir.avro.models.EncounterDiagnosis.Builder setUseBuilder(io.carrera.fhir.avro.models.CodeableConcept.Builder value) {
      clearUse();
      useBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'use' field has an active Builder instance
     * @return True if the 'use' field has an active Builder instance
     */
    public boolean hasUseBuilder() {
      return useBuilder != null;
    }

    /**
      * Clears the value of the 'use' field.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.EncounterDiagnosis.Builder clearUse() {
      use = null;
      useBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'rank' field.
      * @return The value.
      */
    public java.lang.Integer getRank() {
      return rank;
    }


    /**
      * Sets the value of the 'rank' field.
      * @param value The value of 'rank'.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.EncounterDiagnosis.Builder setRank(java.lang.Integer value) {
      validate(fields()[2], value);
      this.rank = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'rank' field has been set.
      * @return True if the 'rank' field has been set, false otherwise.
      */
    public boolean hasRank() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'rank' field.
      * @return This builder.
      */
    public io.carrera.fhir.avro.models.EncounterDiagnosis.Builder clearRank() {
      rank = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public EncounterDiagnosis build() {
      try {
        EncounterDiagnosis record = new EncounterDiagnosis();
        if (conditionBuilder != null) {
          try {
            record.condition = this.conditionBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("condition"));
            throw e;
          }
        } else {
          record.condition = fieldSetFlags()[0] ? this.condition : (io.carrera.fhir.avro.models.Reference) defaultValue(fields()[0]);
        }
        if (useBuilder != null) {
          try {
            record.use = this.useBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("use"));
            throw e;
          }
        } else {
          record.use = fieldSetFlags()[1] ? this.use : (io.carrera.fhir.avro.models.CodeableConcept) defaultValue(fields()[1]);
        }
        record.rank = fieldSetFlags()[2] ? this.rank : (java.lang.Integer) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<EncounterDiagnosis>
    WRITER$ = (org.apache.avro.io.DatumWriter<EncounterDiagnosis>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<EncounterDiagnosis>
    READER$ = (org.apache.avro.io.DatumReader<EncounterDiagnosis>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    this.condition.customEncode(out);

    if (this.use == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.use.customEncode(out);
    }

    if (this.rank == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.rank);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (this.condition == null) {
        this.condition = new io.carrera.fhir.avro.models.Reference();
      }
      this.condition.customDecode(in);

      if (in.readIndex() != 1) {
        in.readNull();
        this.use = null;
      } else {
        if (this.use == null) {
          this.use = new io.carrera.fhir.avro.models.CodeableConcept();
        }
        this.use.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.rank = null;
      } else {
        this.rank = in.readInt();
      }

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (this.condition == null) {
            this.condition = new io.carrera.fhir.avro.models.Reference();
          }
          this.condition.customDecode(in);
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.use = null;
          } else {
            if (this.use == null) {
              this.use = new io.carrera.fhir.avro.models.CodeableConcept();
            }
            this.use.customDecode(in);
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.rank = null;
          } else {
            this.rank = in.readInt();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










